// align A_container_cpu_cores_sum:avg(m("container_cpu_cores"))
// aggregate A_container_cpu_cores_sum:sum(A_container_cpu_cores_sum), group_by()

// timechart 1d, daily_count:count_distinct_exact(block), group_by()
// make_event
// make_col runningAvg:window(avg(daily_count), frame(back:7d)),
//   runningStdev:window(stddev(daily_count), frame(back:7d))
// make_col daily_drift:(daily_count - runningAvg > runningStdev*2) OR (daily_count + runningAvg < runningStdev*2)
// make_col message:"The block has returned an unusual number of events based on recent running averages."
// filter daily_drift=true

filter metric = "container_cpu_util"

timechart 1h,
  cpu_hourly_avg:avg(value),
  cpu_hourly_stdev:stddev(value),
  group_by(container, pod, namespace, clusterUid)

make_col
  max_upper_limit:min(max(cpu_hourly_avg * 1.3, cpu_hourly_avg + 3* cpu_hourly_stdev), 95),
  min_lower_limit:if(
    cpu_hourly_avg < 3*cpu_hourly_stdev,
    cpu_hourly_avg*0.3,
    min(cpu_hourly_avg - 3* cpu_hourly_stdev, cpu_hourly_avg*0.3))

timeshift 7d
make_event

rename_col timestamp:_c_valid_from
make_col metric_obj:make_object(
  "max_upper_limit":max_upper_limit,
  "min_lower_limit":min_lower_limit)

flatten_single metric_obj
make_col metric_type:string(_c_metric_obj_path),
  metric:"container_cpu_util",
  value:float64(_c_metric_obj_value)

filter not is_null(value)

pick_col
  timestamp,
  metric,
  metric_type,
  value,
  container,
  pod,
  namespace,
  clusterUid